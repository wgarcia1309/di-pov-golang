// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"di.com/m/v2/handlers"
	"di.com/m/v2/handlers/a"
	"di.com/m/v2/handlers/b"
	"di.com/m/v2/repositories"
	"di.com/m/v2/usecases"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeHandlerA() handlers.UserHandler {
	iUserRepository := repositories.NewUserRepositoryA()
	userUseCase := usecases.NewUseCaseA(iUserRepository)
	userHandler := a.NewHandler(userUseCase)
	return userHandler
}

func InitializeHandlerB() handlers.UserHandler {
	iUserRepository := repositories.NewUserRepositoryB()
	userUseCase := usecases.NewUseCaseB(iUserRepository)
	userHandler := b.NewHandler(userUseCase)
	return userHandler
}

func InitializeHandlerC() handlers.UserHandler {
	iUserRepository := repositories.NewUserRepositoryB()
	userUseCase := usecases.NewUseCaseA(iUserRepository)
	userHandler := b.NewHandler(userUseCase)
	return userHandler
}

func InitializeHandlerD() handlers.UserHandler {
	iUserRepository := repositories.NewUserRepositoryA()
	userUseCase := usecases.NewUseCaseB(iUserRepository)
	userHandler := b.NewHandler(userUseCase)
	return userHandler
}

// wire.go:

var handlerSetA = wire.NewSet(a.NewHandler, usecases.NewUseCaseA, repositories.NewUserRepositoryA)

var handlerSetB = wire.NewSet(b.NewHandler, usecases.NewUseCaseB, repositories.NewUserRepositoryB)

var handlerSetC = wire.NewSet(b.NewHandler, usecases.NewUseCaseA, repositories.NewUserRepositoryB)
